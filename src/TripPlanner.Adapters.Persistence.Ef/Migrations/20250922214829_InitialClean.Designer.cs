// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TripPlanner.Adapters.Persistence.Ef.Persistence.Db;

#nullable disable

namespace TripPlanner.Adapters.Persistence.Ef.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250922214829_InitialClean")]
    partial class InitialClean
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Common.RefreshTokenRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Common.UserRecord", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Date.DateOptionRecord", b =>
                {
                    b.Property<Guid>("DateOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("DateIso")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TripId")
                        .HasColumnType("TEXT");

                    b.HasKey("DateOptionId");

                    b.HasIndex("TripId");

                    b.ToTable("DateOptions", (string)null);
                });

            modelBuilder.Entity("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Date.DateVoteRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("DateOptionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateOptionId", "ParticipantId")
                        .IsUnique();

                    b.HasIndex("DateOptionId", "UserId");

                    b.ToTable("DateVotes", (string)null);
                });

            modelBuilder.Entity("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Destination.DestinationImageRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("DestinationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DestinationId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("DestinationId1");

                    b.ToTable("DestinationImages");
                });

            modelBuilder.Entity("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Destination.DestinationRecord", b =>
                {
                    b.Property<Guid>("DestinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TripId")
                        .HasColumnType("TEXT");

                    b.HasKey("DestinationId");

                    b.HasIndex("TripId");

                    b.ToTable("Destinations", (string)null);
                });

            modelBuilder.Entity("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Destination.DestinationVoteRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("DestinationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DestinationId1")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId1");

                    b.HasIndex("DestinationId", "ParticipantId")
                        .IsUnique();

                    b.HasIndex("DestinationId", "UserId");

                    b.ToTable("DestinationVotes", (string)null);
                });

            modelBuilder.Entity("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Trip.ParticipantRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ClaimedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPlaceholder")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TripId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TripId", "ParticipantId")
                        .IsUnique();

                    b.HasIndex("TripId", "UserId")
                        .IsUnique();

                    b.ToTable("TripParticipants", (string)null);
                });

            modelBuilder.Entity("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Trip.PlaceholderClaimRecord", b =>
                {
                    b.Property<Guid>("ClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CodeHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TripId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClaimId");

                    b.HasIndex("CodeHash")
                        .IsUnique();

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("TripId", "ParticipantId");

                    b.ToTable("PlaceholderClaims", (string)null);
                });

            modelBuilder.Entity("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Trip.TripInviteRecord", b =>
                {
                    b.Property<Guid>("InviteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CodeHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxUses")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TripId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Uses")
                        .HasColumnType("INTEGER");

                    b.HasKey("InviteId");

                    b.HasIndex("CodeHash")
                        .IsUnique();

                    b.HasIndex("TripId");

                    b.ToTable("TripInvites", (string)null);
                });

            modelBuilder.Entity("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Trip.TripRecord", b =>
                {
                    b.Property<Guid>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DescriptionMarkdown")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<bool>("IsFinished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrganizerId")
                        .HasColumnType("TEXT");

                    b.HasKey("TripId");

                    b.ToTable("Trips", (string)null);
                });

            modelBuilder.Entity("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Common.RefreshTokenRecord", b =>
                {
                    b.HasOne("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Common.UserRecord", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Date.DateOptionRecord", b =>
                {
                    b.HasOne("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Trip.TripRecord", "Trip")
                        .WithMany("DateOptions")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Date.DateVoteRecord", b =>
                {
                    b.HasOne("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Date.DateOptionRecord", null)
                        .WithMany("Votes")
                        .HasForeignKey("DateOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Destination.DestinationImageRecord", b =>
                {
                    b.HasOne("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Destination.DestinationRecord", null)
                        .WithMany("Images")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Destination.DestinationRecord", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Destination.DestinationRecord", b =>
                {
                    b.HasOne("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Trip.TripRecord", "Trip")
                        .WithMany("Destinations")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Destination.DestinationVoteRecord", b =>
                {
                    b.HasOne("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Destination.DestinationRecord", null)
                        .WithMany("Votes")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Destination.DestinationRecord", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Trip.ParticipantRecord", b =>
                {
                    b.HasOne("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Trip.TripRecord", "Trip")
                        .WithMany("Participants")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Common.UserRecord", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Common.UserRecord", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Date.DateOptionRecord", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Destination.DestinationRecord", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("TripPlanner.Adapters.Persistence.Ef.Persistence.Models.Trip.TripRecord", b =>
                {
                    b.Navigation("DateOptions");

                    b.Navigation("Destinations");

                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
