name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_NOLOGO: true
  CONFIG: Release

jobs:
  build-test:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # If you prefer Fedora userspace, see the container: section below
        os: [ ubuntu-latest, windows-latest ]
        dotnet: [ '9.0.x' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET ${{ matrix.dotnet }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet }}
          # cache removed because no packages.lock.json present
            
      # --- Restore
      - name: Restore (Windows)
        if: runner.os == 'Windows'
        run: dotnet restore TripPlanner.sln

      - name: Restore (Linux)
        if: runner.os != 'Windows'
        run: |
          dotnet restore src/TripPlanner.Core.Domain/TripPlanner.Core.Domain.csproj
          dotnet restore src/TripPlanner.Core.Contracts/TripPlanner.Core.Contracts.csproj
          dotnet restore src/TripPlanner.Core.Application/TripPlanner.Core.Application.csproj
          dotnet restore src/TripPlanner.Adapters.Persistence.Ef/TripPlanner.Adapters.Persistence.Ef.csproj
          dotnet restore src/TripPlanner.Adapters.Persistence.InMemory/TripPlanner.Adapters.Persistence.InMemory.csproj
          dotnet restore src/TripPlanner.Core.Validation/TripPlanner.Core.Validation.csproj
          dotnet restore src/TripPlanner.Client/TripPlanner.Client.csproj
          dotnet restore src/TripPlanner.Api/TripPlanner.Api.csproj

      - name: Build solution (Windows)
        if: runner.os == 'Windows'
        run: dotnet build TripPlanner.sln -c $env:CONFIG --no-restore
        shell: pwsh

      - name: Build cross-platform projects (Linux)
        if: runner.os != 'Windows'
        run: |
          dotnet build src/TripPlanner.Core.Domain/TripPlanner.Core.Domain.csproj -c $CONFIG --no-restore
          dotnet build src/TripPlanner.Core.Contracts/TripPlanner.Core.Contracts.csproj -c $CONFIG --no-restore
          dotnet build src/TripPlanner.Core.Application/TripPlanner.Core.Application.csproj -c $CONFIG --no-restore
          dotnet build src/TripPlanner.Adapters.Persistence.Ef/TripPlanner.Adapters.Persistence.Ef.csproj -c $CONFIG --no-restore
          dotnet build src/TripPlanner.Adapters.Persistence.InMemory/TripPlanner.Adapters.Persistence.InMemory.csproj -c $CONFIG --no-restore
          dotnet build src/TripPlanner.Core.Validation/TripPlanner.Core.Validation.csproj -c $CONFIG --no-restore
          dotnet build src/TripPlanner.Client/TripPlanner.Client.csproj -c $CONFIG --no-restore
          dotnet build src/TripPlanner.Api/TripPlanner.Api.csproj -c $CONFIG --no-restore

      - name: Test (Domain)
        run: >
          dotnet test tests/TripPlanner.Tests.Domain/TripPlanner.Tests.Domain.csproj
          -c ${{ env.CONFIG }}
          --no-build
          --logger "trx;LogFileName=TestResults.trx"
          --results-directory ./artifacts/test-results
          --collect:"XPlat Code Coverage"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}
          path: artifacts/test-results

      - name: Build API (ensure ready for swagger tool)
        run: dotnet build src/TripPlanner.Api/TripPlanner.Api.csproj -c ${{ env.CONFIG }} --no-restore

      - name: Install Swashbuckle CLI
        run: dotnet tool install --global Swashbuckle.AspNetCore.Cli

      - name: Generate OpenAPI (v1)
        shell: bash
        run: |
          mkdir -p artifacts
          swagger tofile \
            --output artifacts/openapi-v1.json \
            src/TripPlanner.Api/bin/${CONFIG}/net9.0/TripPlanner.Api.dll v1

      - name: Upload OpenAPI artifact
        uses: actions/upload-artifact@v4
        with:
          name: openapi-v1-${{ matrix.os }}
          path: artifacts/openapi-v1.json

  docker:
    name: Docker Image (API)
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}/tripplanner-api
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push (linux/amd64)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: src/TripPlanner.Api/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
        
  deploy-fly:
    name: Deploy to Fly.io
    needs: docker               # wait for image build & push to GHCR
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}/tripplanner-api
      # choose the tag to deploy: latest on main, else the exact SHA tag
      DEPLOY_TAG: ${{ github.ref_name == 'main' && 'latest' || format('sha-{0}', github.sha) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup flyctl
        uses: superfly/flyctl-actions/setup-flyctl@v1

      - name: Set app secrets (JWT, environment)
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          JWT_KEY: ${{ secrets.JWT_KEY }}
          JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
          JWT_AUDIENCE: ${{ secrets.JWT_AUDIENCE }}
        run: |
          flyctl secrets set \
            ASPNETCORE_ENVIRONMENT=Production \
            Jwt__Key="$JWT_KEY" \
            Jwt__Issuer="$JWT_ISSUER" \
            Jwt__Audience="$JWT_AUDIENCE"

      # (Optional) ensure volume exists (no-op if already created)
      - name: Ensure volume (idempotent)
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl volumes list | grep -q tripperdata || \
          flyctl volumes create tripperdata --region $(flyctl status --json | jq -r .app.primary_region) --size 1

      - name: Deploy prebuilt image from GHCR
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          echo "Deploying ${IMAGE_NAME}:${DEPLOY_TAG}"
          flyctl deploy --image "${IMAGE_NAME}:${DEPLOY_TAG}" --strategy immediate --wait-timeout 300

